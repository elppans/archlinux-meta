#!/bin/bash
# =========================================
# Script de configuração baseado em pacotes instalados
# =========================================

# =========================================
# Funções de log com cores e emojis
# =========================================
log_info() {
    echo -e "\e[34mINFO:\e[0m $1"
}

log_sucesso() {
    echo -e "\e[32mSUCESSO:\e[0m $1"
}

log_erro() {
    echo -e "\e[31mERRO:\e[0m $1"
}

log_aviso() {
    echo -e "\e[33mAVISO:\e[0m $1"
}

# =========================================
# Função para verificar se um pacote está instalado
# =========================================
verificar_pacote() {
    pacman -Q "$1" &>/dev/null
}

# Função genérica para aplicar configuração se pelo menos um pacote estiver instalado
aplicar_configuracao_pacote() {
    local -n _PACOTES=$1
    local funcao_config=$2

    for pacote in "${_PACOTES[@]}"; do
        if verificar_pacote "$pacote"; then
            log_info "Aplicando configuração para pacote: $pacote"
            "$funcao_config"
            return
        fi
    done

    log_aviso "Nenhum dos pacotes encontrados para: ${_PACOTES[*]}"
}

# =========================================
# Declaração das listas de pacotes
# =========================================
PACOTES_APPARMOR=("apparmor" "apparmor-utils" "apparmor-profiles")
PACOTES_FLAMESHOT=("flameshot")
PACOTES_OBSIDIAN=("obsidian-icon-theme")
PACOTES_KERNEL_HOOK=("kernel-modules-hook")
PACOTES_ORCHIS=("orchis-theme")
PACOTES_TELA=("tela-circle-icon-theme-black")
PACOTES_VIMIX=("vimix-cursors")
PACOTES_STEAM=("steam" "steam-native-runtime")
PACOTES_TELEGRAM=("telegram-desktop")
PACOTES_FILE_ROLLER=("file-roller")
PACOTES_FLATPAK=("flatpak")
PACOTES_SNAPD=("snapd")
PACOTES_ACTIONS=("actions-for-nautilus-git")
PACOTES_XBOXDRV=("xboxdrv")
PACOTES_YARU=("yaru-gnome-shell-theme" "yaru-gtk-theme" "yaru-metacity-theme" "yaru-session" "yaru-icon-theme" "yaru-sound-theme")
PACOTES_ZAPZAP=("zapzap")

# =========================================
# Funções de configuração
# =========================================
config_apparmor() {
    log_info "Configurando AppArmor..."
    GRUB_FILE="/etc/default/grub"
    if [ -f "$GRUB_FILE" ]; then
        log_info "Configurando GRUB para AppArmor..."
        if ! grep -q "apparmor=1" "$GRUB_FILE"; then
            sudo sed -i 's/^(GRUB_CMDLINE_LINUX_DEFAULT=\"\)/\1apparmor=1 security=apparmor /' "$GRUB_FILE"
            log_sucesso "Parâmetros adicionados no GRUB."
        fi
        sudo grub-mkconfig -o /boot/grub/grub.cfg
    fi
    sudo systemctl enable apparmor.service
    sudo systemctl start apparmor.service
    sudo systemctl status apparmor.service --no-pager
}

config_flameshot() {
    log_info "Configurando Flameshot..."
    sudo pacman --noconfirm -R xf86-video-intel
    sudo pacman --needed --noconfirm -S "$(pacman-optdepends -c flameshot)"
    local desktop_file="/etc/skel/.local/share/applications/org.flameshot.Flameshot.desktop"
    sudo cp -a /usr/share/applications/org.flameshot.Flameshot.desktop "$desktop_file"
    sudo sed -i 's|/usr/bin/flameshot|/usr/local/bin/flameshot|g' "$desktop_file"
    cp -a "$desktop_file" "$HOME/.local/share/applications"
}

config_icon_obsidian() {
    log_info "Aplicando tema de ícones Obsidian..."
    gsettings set org.gnome.desktop.interface icon-theme "Obsidian-Aqua-Light"
    sudo -u gdm dbus-launch gsettings set org.gnome.desktop.interface icon-theme "Obsidian-Aqua-Light"
}

config_kernel_hook() {
    log_info "Habilitando kernel hook..."
    systemctl is-enabled linux-modules-cleanup.service || sudo systemctl enable --now linux-modules-cleanup.service
}

config_orchis_theme() {
    log_info "Aplicando tema Orchis..."
    gsettings set org.gnome.shell.extensions.user-theme name "Orchis-Dark-Compact"
    gsettings set org.gnome.desktop.interface gtk-theme "Orchis-Dark-Compact"
    gsettings set org.gnome.desktop.interface icon-theme "Orchis-Dark-Compact"
    sudo -u gdm dbus-launch gsettings set org.gnome.desktop.interface gtk-theme "Orchis-Dark-Compact"
    sudo -u gdm dbus-launch gsettings set org.gnome.desktop.interface icon-theme "Orchis-Dark-Compact"
}

config_tela_icon() {
    log_info "Aplicando ícones Tela..."
    gsettings set org.gnome.desktop.interface icon-theme "Tela-circle-black"
    sudo -u gdm dbus-launch gsettings set org.gnome.desktop.interface icon-theme "Tela-circle-black"
}

config_vimix_cursor() {
    log_info "Aplicando cursores Vimix..."
    gsettings set org.gnome.desktop.interface cursor-theme "Vimix-cursors"
    sudo -u gdm dbus-launch gsettings set org.gnome.desktop.interface cursor-theme "Vimix-cursors"
}

config_steam() {
    log_info "Configurando Steam..."
    mkdir -p "$HOME/.config/autostart/"
    cp -av /usr/share/applications/steam-native.desktop "$HOME/.config/autostart/"
    sed -i 's|Exec=/usr/bin/steam-native %U|Exec=/usr/bin/steam-native %U -silent|' "$HOME/.config/autostart/steam-native.desktop"
    sudo sed -i '/en_US.UTF-8 UTF-8/s///' /etc/locale.gen
    grep 'STEAM_FRAME_FORCE_CLOSE' "$HOME/.pam_environment" || echo 'STEAM_FRAME_FORCE_CLOSE DEFAULT=1' >>"$HOME/.pam_environment"
    grep 'STEAM_FRAME_FORCE_CLOSE' "/etc/environment" || echo 'STEAM_FRAME_FORCE_CLOSE=1' | sudo tee -a "/etc/environment"
}

config_telegram() {
    log_info "Configurando Telegram..."
    mkdir -p ~/.local/share/applications
    cp -rf /usr/share/applications/org.telegram.desktop.desktop ~/.local/share/applications/
    sed -i '/Exec/s/%u/%u --hideStart/' ~/.local/share/applications/org.telegram.desktop.desktop
    cp -rf ~/.local/share/applications/org.telegram.desktop.desktop ~/.config/autostart/
    chmod +x ~/.config/autostart/org.telegram.desktop.desktop
}

config_file_roller() {
    log_info "Configurando File Roller..."
    sudo pacman --needed --noconfirm -S "$(pacman-optdepends -c file-roller)"
}

config_flatpak() {
    log_info "Configurando Flathub..."
    sudo flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
}

config_snapd() {
    log_info "Configurando Snapd..."
    sudo ln -s /var/lib/snapd/snap /snap
    sudo systemctl enable --now snapd snapd.socket snapd.apparmor
    {
        echo "snap"
        echo "Snap"
        echo "snapd"
        echo "Snapd"
    } | tee -a /etc/skel/.hidden >>/dev/null
    cat /etc/skel/.hidden >>"$HOME"/.hidden
}

config_actions_nautilus() {
    log_info "Configurando ações do Nautilus..."
    mkdir -p "$HOME/.local/share/actions-for-nautilus"
    curl -JLk -o "$HOME/.local/share/actions-for-nautilus/config.json" "https://raw.githubusercontent.com/elppans/actions-for-nautilus/refs/heads/main/configurator/sample-config.json"
    sed -i 's/gnome-terminal/gnome-console/g' "$HOME/.local/share/actions-for-nautilus/config.json"
    sed -i 's/gedit/gnome-text-editor/g' "$HOME/.local/share/actions-for-nautilus/config.json"
    nautilus -q
}

config_xboxdrv() {
    log_info "Habilitando driver Xbox..."
    sudo systemctl enable --now xboxdrv.service
}

config_yaru() {
    log_info "Aplicando tema Yaru..."

    if ! command -v gsettings &>/dev/null; then
        log_aviso "gsettings não está disponível. Pulando configuração Yaru."
        return
    fi

    if gsettings writable org.gnome.desktop.interface gtk-theme; then
        gsettings set org.gnome.desktop.interface gtk-theme "Yaru-dark"
    elif command -v dconf &>/dev/null; then
        dconf write /org/gnome/desktop/interface/gtk-theme "'Yaru-dark'"
    fi

    if gsettings writable org.gnome.shell.extensions.user-theme name; then
        gsettings set org.gnome.shell.extensions.user-theme name "Yaru-dark"
    elif command -v dconf &>/dev/null; then
        dconf write /org/gnome/shell/extensions/user-theme/name "'Yaru-dark'"
    fi

    if gsettings writable org.gnome.desktop.interface icon-theme; then
        gsettings set org.gnome.desktop.interface icon-theme "Yaru-blue-dark"
    elif command -v dconf &>/dev/null; then
        dconf write /org/gnome/desktop/interface/icon-theme "'Yaru-blue-dark'"
    fi

    if gsettings writable org.gnome.desktop.sound theme-name; then
        gsettings set org.gnome.desktop.sound theme-name "Yaru"
    elif command -v dconf &>/dev/null; then
        dconf write /org/gnome/desktop/sound/theme-name "'Yaru'"
    fi

    if [ -n "$(pgrep gdm)" ]; then
        sudo -u gdm dbus-launch gsettings set org.gnome.desktop.interface gtk-theme "Yaru-dark" 2>/dev/null || true
        sudo -u gdm dbus-launch gsettings set org.gnome.desktop.interface icon-theme "Yaru-blue-dark" 2>/dev/null || true
    fi
}

config_zapzap() {
    log_info "Configurando ZapZap..."
    cp -rf /usr/share/applications/com.rtosta.zapzap.desktop ~/.local/share/applications/
    sed -i '/Exec/s/%u/%u --hideStart/' ~/.local/share/applications/com.rtosta.zapzap.desktop
    cp -rf ~/.local/share/applications/com.rtosta.zapzap.desktop ~/.config/autostart/
    chmod +x ~/.config/autostart/com.rtosta.zapzap.desktop
}

# =========================================
# Aplicações de configuração por pacote
# =========================================
aplicar_configuracao_pacote PACOTES_APPARMOR config_apparmor
aplicar_configuracao_pacote PACOTES_FLAMESHOT config_flameshot
aplicar_configuracao_pacote PACOTES_OBSIDIAN config_icon_obsidian
aplicar_configuracao_pacote PACOTES_KERNEL_HOOK config_kernel_hook
aplicar_configuracao_pacote PACOTES_ORCHIS config_orchis_theme
aplicar_configuracao_pacote PACOTES_TELA config_tela_icon
aplicar_configuracao_pacote PACOTES_VIMIX config_vimix_cursor
aplicar_configuracao_pacote PACOTES_STEAM config_steam
aplicar_configuracao_pacote PACOTES_TELEGRAM config_telegram
aplicar_configuracao_pacote PACOTES_FILE_ROLLER config_file_roller
aplicar_configuracao_pacote PACOTES_FLATPAK config_flatpak
aplicar_configuracao_pacote PACOTES_SNAPD config_snapd
aplicar_configuracao_pacote PACOTES_ACTIONS config_actions_nautilus
aplicar_configuracao_pacote PACOTES_XBOXDRV config_xboxdrv
aplicar_configuracao_pacote PACOTES_YARU config_yaru
aplicar_configuracao_pacote PACOTES_ZAPZAP config_zapzap

log_sucesso "Todas as configurações foram aplicadas com sucesso!"
