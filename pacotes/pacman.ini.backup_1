#!/bin/bash
# shellcheck disable=SC2128

# Função para verificar se o pacote está instalado
verificar_pacote() {
	pacman -Q "$1" &>/dev/null
}

### Modelo instalação
# Verificando pacotes
# Nome do pacote
# PACOTES=("")
# Verifica se o pacote está instalado
# if verificar_pacote "$PACOTES"; then
#	comandos
# fi
# Variável para verificar se algum pacote está instalado
# PACOTE_INSTALADO=false
# Loop para verificar cada pacote
# for pacote in "${PACOTES[@]}"; do
#	if verificar_pacote "$pacote"; then
#		PACOTE_INSTALADO=true
#		break
#	fi
# done
# Se pelo menos um dos pacotes estiver instalado, aplica a configuração
# if $PACOTE_INSTALADO; then
#   comandos
# fi

########################################################################################################
# pacote-pacman-apparmor-instalar.sh

# Variável para verificar se algum pacote está instalado
PACOTE_INSTALADO=false

# Lista de pacotes
PACOTES=("apparmor" "apparmor-utils" "apparmor-profiles")

# Loop para verificar cada pacote
for pacote in "${PACOTES[@]}"; do
	if verificar_pacote "$pacote"; then
		PACOTE_INSTALADO=true
		break
	fi
done

# Se pelo menos um dos pacotes estiver instalado, aplica a configuração
if $PACOTE_INSTALADO; then
	echo "Pelo menos um dos pacotes está instalado. Aplicando configuração..."

	# Configura os parâmetros do kernel no GRUB
	GRUB_FILE="/etc/default/grub"
	if [ -f "$GRUB_FILE" ]; then
		echo "Configurando os parâmetros do GRUB para habilitar o AppArmor..."
		if ! grep -q "apparmor=1" "$GRUB_FILE"; then
			sudo sed -i 's/^\(GRUB_CMDLINE_LINUX_DEFAULT="\)/\1apparmor=1 security=apparmor /' "$GRUB_FILE"
			echo "Parâmetros adicionados no GRUB_CMDLINE_LINUX_DEFAULT."
		else
			echo "Parâmetros do AppArmor já configurados no GRUB_CMDLINE_LINUX_DEFAULT."
		fi

		echo "Atualizando a configuração do GRUB..."
		sudo grub-mkconfig -o /boot/grub/grub.cfg
	else
		echo "Arquivo $GRUB_FILE não encontrado. Se você não utiliza o GRUB, adicione os parâmetros 'apparmor=1 security=apparmor' manualmente no seu bootloader."
	fi

	# Habilita e inicia o serviço do AppArmor
	echo "Habilitando e iniciando o serviço do AppArmor..."
	sudo systemctl enable apparmor.service
	sudo systemctl start apparmor.service

	echo "Status atual do serviço AppArmor:"
	sudo systemctl status apparmor.service --no-pager

	echo "Instalação e configuração do AppArmor concluída."
else
	echo
fi

########################################################################################################
# pacote-pacman-flameshot.sh

# Nome do pacote
PACOTES=("flameshot")

# Verifica se o pacote está instalado
if verificar_pacote "$PACOTES"; then
	echo "O pacote $PACOTES está instalado. Aplicando configuração..."
	sudo pacman --noconfirm -R xf86-video-intel
	sudo pacman --needed --noconfirm -S "$(pacman-optdepends -c flameshot)"
	sudo cp -a /usr/share/applications/org.flameshot.Flameshot.desktop /etc/skel/.local/share/applications
	sudo sed -i 's|/usr/bin/flameshot|/usr/local/bin/flameshot|g' /etc/skel/.local/share/applications/org.flameshot.Flameshot.desktop
	sudo sed -i 's|Exec=flameshot|Exec=/usr/local/bin/flameshot|g' /etc/skel/.local/share/applications/org.flameshot.Flameshot.desktop
	cp -a /etc/skel/.local/share/applications/org.flameshot.Flameshot.desktop "$HOME/.local/share/applications"
	echo "Configuração do Flameshot concluída."
else
	echo
fi

########################################################################################################
# pacote-pacman-icon-theme.sh

# Tema de ícones

# Nome do pacote
PACOTES=("obsidian-icon-theme")

# Verifica se o pacote está instalado
if verificar_pacote "$PACOTES"; then
	gsettings set org.gnome.desktop.interface icon-theme "Obsidian-Aqua-Light"
	sudo -u gdm dbus-launch gsettings set org.gnome.desktop.interface icon-theme "Obsidian-Aqua-Light"
fi

# Nome do pacote
# PACOTES=("cutefish-icons")

# Verifica se o pacote está instalado
# if verificar_pacote "$PACOTES"; then
# 	gsettings set org.gnome.desktop.interface icon-theme ""
# 	sudo -u gdm dbus-launch gsettings set org.gnome.desktop.interface icon-theme ""
# fi

########################################################################################################
# pacote-pacman-kernel-hook.sh

# Nome do pacote
PACOTES=("kernel-modules-hook")

# Verifica se o pacote está instalado
if verificar_pacote "$PACOTES"; then
	sudo systemctl enable --now linux-modules-cleanup.service # Ativa e inicia o serviço para limpar módulos antigos do kernel.
fi

########################################################################################################
# pacote-pacman-lutris_instalar.sh

# sudo pacman -S --needed gamemode lib32-gamemode lutris wine-staging winetricks apparmor lib32-libpulse lib32-libsndfile lib32-libasyncns

########################################################################################################
# pacote-pacman-orchis-theme-black.sh e pacote-pacman-orchis-theme-full.sh

# Nome do pacote
PACOTES=("orchis-theme")

# Verifica se o pacote está instalado
if verificar_pacote "$PACOTES"; then
	gsettings set org.gnome.shell.extensions.user-theme name "Orchis-Dark-Compact"
	gsettings set org.gnome.desktop.interface gtk-theme "Orchis-Dark-Compact"
	gsettings set org.gnome.desktop.interface icon-theme "Orchis-Dark-Compact"
	sudo -u gdm dbus-launch gsettings set org.gnome.desktop.interface gtk-theme "Orchis-Dark-Compact"
	sudo -u gdm dbus-launch gsettings set org.gnome.desktop.interface icon-theme "Orchis-Dark-Compact"
fi

# Nome do pacote
PACOTES=("tela-circle-icon-theme-black")

# Verifica se o pacote está instalado
if verificar_pacote "$PACOTES"; then
	gsettings set org.gnome.desktop.interface icon-theme "Tela-circle-black"
	sudo -u gdm dbus-launch gsettings set org.gnome.desktop.interface icon-theme "Tela-circle-black"
fi

# Nome do pacote
PACOTES=("vimix-cursors")

# Verifica se o pacote está instalado
if verificar_pacote "$PACOTES"; then
	gsettings set org.gnome.desktop.interface cursor-theme "Vimix-cursors"
	sudo -u gdm dbus-launch gsettings set org.gnome.desktop.interface cursor-theme "Vimix-cursors"
fi

########################################################################################################
# pacote-pacman-steam_game-devices-udev.sh

# Instala o pacote game-devices-udev, que fornece regras udev para dispositivos de jogo (como controle, joystick, etc.)
# Dependẽncia para Steam versão Flatpak
# paru --needed --noconfirm -S game-devices-udev

########################################################################################################
# pacote-pacman-steam_instalar.sh

# Lista de pacotes
PACOTES=("steam-native-runtime" "steam")

# Variável para verificar se algum pacote está instalado
PACOTE_INSTALADO=false

# Loop para verificar cada pacote
for pacote in "${PACOTES[@]}"; do
	if verificar_pacote "$pacote"; then
		PACOTE_INSTALADO=true
		break
	fi
done

# Se pelo menos um dos pacotes estiver instalado, aplica a configuração
if $PACOTE_INSTALADO; then
	mkdir -p "$HOME/.config/autostart/"
	cp -av /usr/share/applications/steam-native.desktop "$HOME/.config/autostart/"
	sed -i 's|Exec=/usr/bin/steam-native %U|Exec=/usr/bin/steam-native %U -silent|' "$HOME/.config/autostart/steam-native.desktop"
	sudo sed -i '/en_US.UTF-8 UTF-8/s///' /etc/locale.gen
	grep 'STEAM_FRAME_FORCE_CLOSE DEFAULT=1' "$HOME/.pam_environment" && echo "Steam pam_environment OK!" || echo 'STEAM_FRAME_FORCE_CLOSE DEFAULT=1' >>"$HOME/.pam_environment"
	# shellcheck disable=SC2015
	grep 'STEAM_FRAME_FORCE_CLOSE' "/etc/environment" && echo "Steam force close OK!" || echo 'STEAM_FRAME_FORCE_CLOSE=1' | sudo tee -a "/etc/environment"
fi

########################################################################################################
# pacote-pacman-telegram_instalar.sh

# Nome do pacote
PACOTES=("telegram-desktop")

# Verifica se o pacote está instalado
if verificar_pacote "$PACOTES"; then
	mkdir -p ~/.local/share/applications
	cp -rf /usr/share/applications/org.telegram.desktop.desktop ~/.local/share/applications/org.telegram.desktop.desktop
	sed -i '/Exec/s/\%u/\%u --hideStart/' ~/.local/share/applications/org.telegram.desktop.desktop
	cp -rf ~/.local/share/applications/org.telegram.desktop.desktop ~/.config/autostart/org.telegram.desktop.desktop
	chmod +x ~/.config/autostart/org.telegram.desktop.desktop
fi

########################################################################################################
# Dependências opcionais de File Roller, gerenciador de arquivos compactados.

# Nome do pacote
PACOTES=("file-roller")

# Verifica se o pacote está instalado
if verificar_pacote "$PACOTES"; then
	sudo pacman --needed --noconfirm -S "$(pacman-optdepends -c file-roller)"
fi

########################################################################################################
# gerenciador-de-pacotes-flatpak.sh

# Nome do pacote
PACOTES=("flatpak")

# Verifica se o pacote está instalado
if verificar_pacote "$PACOTES"; then
	sudo flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
fi

########################################################################################################
# gerenciador-de-pacotes-snapd.sh

# Nome do pacote
PACOTES=("snapd")

# Verifica se o pacote está instalado
if verificar_pacote "$PACOTES"; then
	# AppArmor (Recomendado usar, para manter a segurança dos pacotes Snap)
	# https://wiki.archlinux.org/title/AppArmor
	# Movido para Sessão de Scripts

	# Instalação de pacotes via AUR

	# Gerenciador de pacotes Snapd
	# https://wiki.archlinux.org/title/Snap

	sudo ln -s /var/lib/snapd/snap /snap
	sudo systemctl enable --now snapd snapd.socket snapd.apparmor

	# ocultar a pasta. snap
	{
		echo "snap"
		echo "Snap"
		echo "snapd"
		echo "Snapd"
	} | tee -a /etc/skel/.hidden >>/dev/null
	cat /etc/skel/.hidden >>"$HOME"/.hidden
fi

########################################################################################################
# pacote-aur-actions-for-nautilus.sh

PACOTES=("actions-for-nautilus-git")

if verificar_pacote "$PACOTES"; then
## Configuração CUSTOMIZADA do Actions for Nautilus
	mkdir -p "$HOME/.local/share/actions-for-nautilus"
	curl -JLk -o "$HOME/.local/share/actions-for-nautilus/config.json" "https://raw.githubusercontent.com/elppans/actions-for-nautilus/refs/heads/main/configurator/sample-config.json"
	sed -i 's/gnome-terminal/gnome-console/g' "$HOME/.local/share/actions-for-nautilus/config.json"
	sed -i 's/gedit/gnome-text-editor/g' "$HOME/.local/share/actions-for-nautilus/config.json"
	nautilus -q
fi

########################################################################################################
# pacote-aur-xboxdrv_instalar.sh

PACOTES=("xboxdrv")

if verificar_pacote "$PACOTES"; then
	sudo systemctl enable --now xboxdrv.service
fi

#########################################################################################################
# pacote-aur-yaru-theme-full.sh

PACOTES=("yaru-gnome-shell-theme yaru-gtk-theme  yaru-metacity-theme yaru-session")

# Variável para verificar se algum pacote está instalado
PACOTE_INSTALADO=false

# Loop para verificar cada pacote
for pacote in "${PACOTES[@]}"; do
	if verificar_pacote "$pacote"; then
		PACOTE_INSTALADO=true
		break
	fi
done
# Se pelo menos um dos pacotes estiver instalado, aplica a configuração
if $PACOTE_INSTALADO; then
	gsettings set org.gnome.shell.extensions.user-theme name "Yaru-dark"
	gsettings set org.gnome.desktop.interface gtk-theme "Yaru-dark"
	sudo -u gdm dbus-launch gsettings set org.gnome.desktop.interface gtk-theme "Yaru-dark"
fi

PACOTES=("yaru-icon-theme")

# Loop para verificar cada pacote
for pacote in "${PACOTES[@]}"; do
	if verificar_pacote "$pacote"; then
		PACOTE_INSTALADO=true
		break
	fi
done
# Se pelo menos um dos pacotes estiver instalado, aplica a configuração
if $PACOTE_INSTALADO; then
	gsettings set org.gnome.desktop.interface icon-theme "Yaru-blue-dark"
	sudo -u gdm dbus-launch gsettings set org.gnome.desktop.interface icon-theme "Yaru-blue-dark"
fi

PACOTES=("yaru-sound-theme")

# Loop para verificar cada pacote
for pacote in "${PACOTES[@]}"; do
	if verificar_pacote "$pacote"; then
		PACOTE_INSTALADO=true
		break
	fi
done
# Se pelo menos um dos pacotes estiver instalado, aplica a configuração
if $PACOTE_INSTALADO; then
	gsettings set org.gnome.desktop.sound theme-name "Yaru"
fi
##################################################################################################
# pacote-aur-zapzap_instalar.sh

PACOTES=("zapzap")

# Variável para verificar se algum pacote está instalado
PACOTE_INSTALADO=false

# Loop para verificar cada pacote
for pacote in "${PACOTES[@]}"; do
	if verificar_pacote "$pacote"; then
		PACOTE_INSTALADO=true
		break
	fi
done

# Se pelo menos um dos pacotes estiver instalado, aplica a configuração
if $PACOTE_INSTALADO; then
	cp -rf /usr/share/applications/com.rtosta.zapzap.desktop ~/.local/share/applications/com.rtosta.zapzap.desktop
	sed -i '/Exec/s/\%u/\%u --hideStart/' ~/.local/share/applications/com.rtosta.zapzap.desktop
	cp -rf ~/.local/share/applications/com.rtosta.zapzap.desktop ~/.config/autostart/com.rtosta.zapzap.desktop
	chmod +x ~/.config/autostart/com.rtosta.zapzap.desktop
fi
